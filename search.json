[
  {
    "objectID": "posts/intro-to-huggingface-api/2021-06-20-intro-huggingface-api.html",
    "href": "posts/intro-to-huggingface-api/2021-06-20-intro-huggingface-api.html",
    "title": "A Gentle Introduction to the Hugging Face API",
    "section": "",
    "text": "Introduction\nNatural Language Processing is a fast-advancing field. And it is also one of the fields that require a huge amount of computational resources to make important progress. And although breakthroughs are openly announced, and papers are released in free-to-access repositories such as arXiv, Open Review, Papers with Code, etc., and despite (sometimes) having the code freely available on GitHub, using those language models is not something widely accessible and easy.\nLet me provide more context. BERT is a state-of-the-art encoder language model. It takes days to train the model from the ground up even when using very powerful GPUs that only a few entities have access to. In 2019, NVIDIA used 1472 NVIDIA V100 GPUs to train BERT from scratch in 53 minutes. Yes, 1,472!\nOne estimate puts the cost of training GPT-3, a 175 billion parameter model, for a single training run at $12 Million USD.\nAnd such language models are released every now and then. How do you use these powerful language models for your task?\nHere Hugging Face comes to the scene. They aim to solve this problem by providing pre-trained models, and simple API so that you can use them, fine-tune them, and use the API in your applications.\nIn this article, my goal is to introduce the Hugging Face pipeline API to accomplish very interesting tasks by utilizing powerful pre-trained models present in the models hub of Hugging Face.\nTo follow through this article, you need not have any prior knowledge of Natural Language Processing. I, however, assume minor prior experience in writing Python code.\n\nIn this article, I will go over, describe, and provide examples for the following tasks using Hugging Face pipeline-\n\nSentiment Analysis\nZero-Shot Classification\nText Generation\nMask-Filling\nNamed Entity Recognition\nQuestion Answering\nSummarization\nTranslation\n\n\n\n\nInstalling and Importing\n! pip install transformers[sentencepiece] > /dev/null\nIf you have not seen a pip install with a square bracket in it before, don’t worry. It means that you are installing the transformers package with extra support added for the sentencepiece package. You can find out more about square parentheses installs in pip here.\nfrom transformers import pipeline\nWe will use the utilities available in the pipeline namespace in the transformers library.\n\n\n\nSentiment Analysis\nBefore I begin going through the specific pipelines, let me tell you something beforehand that you will find yourself. Hugging Face API is very intuitive. When you want to use a pipeline, you have to instantiate an object, then you pass data to that object to get result. Very simple! You are soon to see what I mean.\nclassifier_sentiment = pipeline(\"sentiment-analysis\")\nThat’s it. You call the pipeline() method with the task you want to accomplish as an argument. And you assign a name to it. You are done now. You can now begin to use the object as a function to achieve what you want. Let’s see an example-\n\n\nSee, it returns a dictionary contained in a list that has two items, label and score. The label part tells us its prediction, and the score tells us its confidence score.\n\nAs an aside, I think they are structured this way because this structure is easily compatible with .json and similar filetypes which are very common in APIs.\n\nLet’s see another example.\n\n\nSee, how the classifier is aware of my emotion about pineapple pizzas? 🙃\n\n\n\nZero-Shot Classification\nWhen you want to classify something using Deep Learning, in many cases you need to train it with labeled examples. This approach is known as Supervised Learning. Even when leveraging transfer learning, you need to train your model with quite a few labeled examples in the domain of your choice. Zero-shot classification is different than that. In this, you use a pre-trained model to classify a given string and some labels of your choice. The model returns you the confidence score for each model.\nLet me show you how this works. First, you instantiate an object and assign it a name just like you did in the case of the Sentiment Analysis pipeline.\nclassifier_zero_shot = pipeline(\"zero-shot-classification\")\nThen you pass a string, along with the labels of your choice to test how well they correspond to your sentence.\n\n\nSee, the given sentence is about a profession, and the model tells you that. And it knows that it is much more related to education than politics.\nEssentially, when you are doing Zero-Shot Classification, you are supplying a string to the pipeline, and also labels. The pipeline returns how accurate those labels are.\n\n\n\nText Generation\nBefore I heard about Deep Learning, I heard about Natural Language Processing, because I heard that you can generate text with it! This is the most exciting part of NLP to me, personally.\nAs the name suggests, this pipeline lets you generate text. It just needs you to supply a prompt, a text that will determine what the generated text will be. Let me show you how.\ngenerator = pipeline(\"text-generation\")\n\n\nSee what I mean! Even with zero training, it can create logically coherent text that is even interesting to read. Robots will take over writers soon 🤖!\nYou can control the maximum length of the output of the pipeline, and even ask for multiple possible outputs, like so-\n\n\n\nWhoa, it’s poetic!\n\nWe can accomplish more interesting things with transfer learning. But that is a story for another day.\n\n\n\nMask Filling\nIn this pipeline, if there is a word that you hide and supply the string with the hidden word, the pipeline will predict that word. This is like magic!\nunmasker = pipeline(\"fill-mask\")\nYou pass the sentence with the masked word, and it will predict it. You can choose the number of predictions you want to see. You just have to pass a value to the top_k parameter.\n\n\n\n\nIt can predict the words quite well. Just remember to mask the word using <mask>.\n\n\n\nNamed Entity Recognition\nThis pipeline recognizes the proper nouns in your sentence. And it also classifies them. Let’s see an example.\nner = pipeline(\"ner\", grouped_entities=True)\nThe grouped_entities parameter just ensures that the pipeline can recognize the names that have more than one word, like, you know, Chocolate Factory.\n\n\nSee how it recognizes a person, his profession, and location on its own, and also labels them as “PER”, “ORG”, and “LOC” (meaning location), respectively.\n\n\n\nQuestion Answering\nThis pipeline provides you with an answer to a question you ask from the context that you provide.\nquestion_answerer = pipeline(\"question-answering\")\n\n\nIt can answer multiple questions from the same prompt.\n\n\n\n\n\nSummarization\nThis is one of the most practical tasks that has existed for a long time. Deep Learning really changes the landscape of the task.\nLet’s see it in action.\nsummarizer = pipeline(\"summarization\")\nLet’s summarize a piece of text from a blog post I recently read.\n\n\nNow, that’s something! The efficacy of the summarizer really shocked me. It does this task so well.\n\n\n\nTranslation\nThe translation pipeline translates a piece of text from one language to another. It also lets you choose the language model of your choice.\nFirst, let’s translate a text from English to German. I will use the Helsinki-NLP/opus-mt-en-de model for this task.\ntranslator_de = pipeline(\"translation\", model=\"Helsinki-NLP/opus-mt-en-de\")\n\n\nNote that you are not explicitly telling the model about the language of the input language or the output language. A language model is only trained for translating from one language to another. It cannot translate other languages. If you want to translate from German to English, you’d have to use another model from the model hub. You can find all the translation models here.\nThe cool thing is that Hugging Face is not limited to Romance languages or European languages in general. Let me show you by translating a piece of text from Bengali.\ntranslator_bn = pipeline(\"translation\", model=\"Helsinki-NLP/opus-mt-bn-en\")\n\n\n\n\n\n\n\n\nConclusion\nI have shown you several pipeline APIs and what they do and how they work.\nHere are the suggested next steps-\n\nExperiment. Play with the pipelines by yourself, try different things with different parameters, run inference on examples of your own, test edge cases, run wild with it. I believe that is the best way to learn.\nDo Projects. Use the knowledge you gained here in simple projects. We only learn by doing.\nHugging Face Course. Hugging Face has recently released a free course where they teach you about Transformers and their library ecosystem. It is a good next step.\nExplore. Explore the Hugging Face website, learn more about their APIs, Services, pre-trained models, and many more things it has to offer.\n\n\nIf you notice any error, mistake, or typo, please feel free to let me know. If something is not clear, please let me know that as well. I will do my best to correct it and will credit you here.\nLet me know if you have any questions at all.\n\n(Originally published as a Notebook on Kaggle.)"
  },
  {
    "objectID": "posts/non-linear-dynamics-trajectories-with-python/index.html",
    "href": "posts/non-linear-dynamics-trajectories-with-python/index.html",
    "title": "Non-Linear Dynamics Trajectories with Python",
    "section": "",
    "text": "Non-Linear Dynamics Trajectories with Python\nby Ritobrata Ghosh\n\nIntroduction\nIn this Notebook, trajectories of the Logistic Map [1] is plotted with Python.\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef logistic_function(parameter: float, initial_value: float) -> float:\n    return parameter * initial_value * (1 - initial_value)\ndef logistic_function_trajectory(parameter: float,\n                                 initial_value: float,\n                                 num_iter: int) -> np.array:\n    trajectory = np.zeros(num_iter)\n    trajectory[0] = initial_value\n    for i in range(num_iter-1):\n        trajectory[i+1] = logistic_function(parameter, initial_value)\n        initial_value = trajectory[i+1]\n    return np.array(trajectory)\nlogistic_function_trajectory(parameter=2.2, initial_value=0.8, num_iter=10)\narray([0.8       , 0.352     , 0.5018112 , 0.54999278, 0.54450159,\n       0.54564314, 0.54541675, 0.5454621 , 0.54545303, 0.54545485])\nxs = np.linspace(1, 200, 200)\nys = logistic_function_trajectory(parameter=2.2, initial_value=0.8, num_iter=200)\ndef plot_trajectory(xs, ys, x_label, y_label, title):\n    plt.figure(figsize=(20,10))\n    plt.scatter(xs, ys, marker='o', edgecolor='black', c=point_colors * 50);\n    plt.xlabel(x_label);\n    plt.ylabel(y_label);\n    plt.title(title);\n    plt.grid();\npoint_colors = ['cyan', 'magenta', 'yellow', 'black']\nplot_trajectory(xs=xs, ys=ys, x_label='$n$', y_label='$x_n$', title='Trajectory')\n\n\n\n\\[r = 2\\]\nx_n = logistic_function_trajectory(parameter=2.0, initial_value=0.2, num_iter=200)\nx_n_hat = logistic_function_trajectory(parameter=2.0, initial_value=0.200001, num_iter=200)\nys = abs(np.subtract(x_n, x_n_hat))\nxs = np.linspace(1, 200, 200)\nplot_trajectory(xs=xs, ys=ys, x_label='$n$', y_label='$ x_n - \\hat{x_n} $', title='Trajectory for $r = 2$')\n\n\n\nPlotting \\(x_n - \\hat{x_n}\\) vs. \\(n\\) for \\(r=3.4\\)\nx_n = logistic_function_trajectory(parameter=3.4, initial_value=0.2, num_iter=200)\nx_n_hat = logistic_function_trajectory(parameter=3.4, initial_value=0.200001, num_iter=200)\n\nys = abs(np.subtract(x_n, x_n_hat))\nxs = np.linspace(1, 200, 200)\n\nplot_trajectory(xs=xs, ys=ys, x_label='$n$', y_label='$ x_n - \\hat{x_n} $', title='Trajectory for $r = 3.4$')\n\nWe can thus plot the trajectories of the Logistic Map with Python and relevant libraries.\n\n\n\nReferences\n\nhttps://en.wikipedia.org/wiki/Logistic_map\nBradley, Liz: Nonlinear Dynamics: Mathematical and Computational Approaches via Complexity Explorer, Santa Fe Institute\n\nCite this Notebook:\n@ONLINE {,\n    author = \"Ritobrata Ghosh\",\n    title  = \"Non Linear Dynamics Trajectories with Python\",\n    month  = \"apr\",\n    year   = \"2023\",\n    url    = \"https://www.kaggle.com/truthr/non-linear-dynamics-trajectories-with-python\"\n}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blogs by Rito Ghosh",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nNon-Linear Dynamics Trajectories with Python\n\n\n\n\n\n\n\ndeep-learning\n\n\nphysics\n\n\nchaos-theory\n\n\nai\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2023\n\n\nRitobrata Ghosh\n\n\n\n\n\n\n  \n\n\n\n\nA Gentle Introduction to the Hugging Face API\n\n\nA Hands-On Tutorial\n\n\n\n\ndeep-learning\n\n\nmachine-learning\n\n\ndata-science\n\n\nai\n\n\ntutorial\n\n\nnlp\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nJun 20, 2021\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]